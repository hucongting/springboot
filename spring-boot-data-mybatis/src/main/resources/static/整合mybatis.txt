整合MyBatis
    <dependency>
      <groupId>org.mybatis.spring.boot</groupId>
      <artifactId>mybatis-spring-boot-starter</artifactId>
      <version>1.3.1</version>
    </dependency>
注解版：
    1.配置数据源相关属性(这里用Druid数据源)
    2.创建JavaBean
    3.
    //指定这是一个操作数据库的mapper
    @Mapper
    public interface DepartmentMapper {
        @Select("select * from department where id=#{id}")
        public Department getDeptById(Integer id);

        @Delete("delete from department where id=#{id}")
        public int deleteDeptById(Integer id);

        @Options(useGeneratedKeys = true,keyProperty = "id")
        @Insert("insert into department(departmentName) values(#{departmentName})")
        public int insertDept(Department department);

        @Update("update department set departmentName=#{departmentName} where id=#{id}")
        public int updateDept(Department department);
    }



自定义Mybatis配置规则；给容器中添加一个ConfigurationCustomizer；
    @org.springframework.context.annotation.Configuration
    public class MyBatisConfig {
        @Bean
        public ConfigurationCustomizer configurationCustomizer(){
            return new ConfigurationCustomizer(){
                @Override
                public void customize(Configuration configuration) {
                    configuration.setMapUnderscoreToCamelCase(true);
                }
            };
        }
    }



批量扫描所有dao接口
    @MapperScan(value = "com.atguigu.springboot.mapper")
    @SpringBootApplication
    public class SpringBoot06DataMybatisApplication {

      public static void main(String[] args) {
        SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);
      }
    }



