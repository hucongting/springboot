开发技巧：禁用缓存, Ctrl+F9不重启刷新页面(重新编译)
webapps目录： ctrl+shift+alt+S(Project Structure) -> Modules

日志框架：
1.如果要引入其他框架？一定要把这个框架的默认日志依赖移除掉吗？
  SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架时，只需要把这个框架依赖的日志框架排除掉。
2.如果你什么都不做，Spring Boot默认会使用Logback来打印和记录日志，并且它的日志级别是INFO，也就是说，它只输出级别比INFO高的日志（TRACE < DEBUG < INFO < WARN < ERROR）
日志使用：
  SpringBoot默认帮我们配置好了日志。
日志级别：
  SpringBoot默认给我们使用的是info级别的;
  由低到高  trace<debug<info<warn<error;
  可以调整输出的日志级别:application.properties;
  #logging.level.com.tedu = trace
默认格式： %d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n
  %d  表示日期时间
  %thread  表示线程名
  %-5level  级别从左显示5个字符宽度
  %logger{36}  表示logger名字最长36个字符，否则按照句点分割
  %msg  日志消息
  %n  是换行符
日志文件大小超过10MB(可在file-appender.xml文件修改)会自动创建spring.log(版本号1+);
3.指定日志配置文件：
  3.1 给类路径下放上每个日志框架自己的配置文件即可，SpringBoot就不使用他默认配置;
      logback日志框架: logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
      log4j日志框架: log4j-spring.xml, log4j2.xml
      jdk(java.utill.logging): logging.properties
      注意：logback.xml直接被日志框架识别了，logback.spring.xml日志框架不直接加载日志配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能！否则使用会报错
      <springProfile>
        可以指定某段配置只在某个环境下生效
      </springProfile>
  3.2 logging.config




Web开发
1.SpringBoot对静态资源的映射
    1.所有/webjars/**,都去classpath:/META-INF/resources/webjars/找资源;
      webjars: 以jar包的方式引入静态资源
      localhost:xxxx/webjars/jquery/3.3.1/dist/jquery.js
    2./** 访问当前项目的任何资源(静态资源文件夹)
      classpath:/WEB-INF/resources/
      classpath:/resources/
      classpath:/static/
      classpath:/public/
      /:当前项目的跟路径
      localhost:xxxx/wenjinajia/文件
      自定义静态文件夹目录:#spring.resources.static-locations=classpath:/xxxx/,系统默认的目录就不生效
    3.小图标: 所有的**/favicon.ico,都是在静态资源文件下找




模板引擎
jsp,freemarker,velocity,Thymeleaf
SpringBoot推荐的Thymeleaf:语法简单,功能强大.
1.引入thymeleaf
  切换thymeleaf版本:
  <properties>
    <thymeleaf.version>3.0.9.RELEASE</thymeleaf.version>
    <thymeleaf.layout-dialect.version>2.2.2</thymeleaf.layout-dialect.version>
  </properties>
2.表达式：
  1.${...}: OGNL; 获取变量值
    1) 获取对象的属性,调用方法
    2)使用内置基本对象(request,response,session,servletContext...)
    3)内置的一些工具对象
  2.*{...}: 变量选择表达式, 和${...}在功能上是一样
    补充: 配合th:object="${session.xxx}"使用
  3.#{...}: 获取国际化内容
  4.@{...}: 定义URL
  5.～{...}: 片段引用表达式




SpringMVC自动配置
  自动配置了ViewResolver(视图解析器：根据方法的返回值得到视图对象(View),视图对象决定如何渲染(转发，重定向))
  ContentNegotiatingViewResolver: 组合所有的视图解析器;
  如何定制：我们可以自己给容器中添加一个视图解析器,自动的将其结合进来;
  Converter:转换器
  Formatter:格式化器
  HttpMessageConverter: SpringMVC用来转化Http请求和响应的;
  HttpMessageConverters是从容器中确定，获取所有的HttpMessageConverter


如何修改SpringBoot的默认配置
  模式：
  1.SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的(@Bean,@Component)如果有就用用户配置的,如果没有才自动配置;如果有些组件可以有多个(ViewResolver)将用户配置的和自己默认的组合起来
  2.在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置.
扩展SpringMVC
  编写一个配置类(@Configuration),是WebMvcConfigurerAdapter类型;不能标注@EnableWebMvc

全面接管SpringMVC:
  SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置,所有的SpringMVC的自动配置都失效了
  我们需要在类中添加@EnableWebMvc即可;
为什么加了@EnableWebMvc自动配置就失效了？


SpringBoot国际化(配置文件可以直接放到类路径下叫 messages.properties)
    1) 编写国际化配置文件,抽取页面需要显示国际化的信息
    2) SpringBoot自动配置好了管理国际化资源文件的组件
    3) 配置spring.messages.basename=i18n.login
    4) 去页面获取国际化的值


错误处理机制
    springboot默认的错误处理机制，默认的出错页面，如果是其他客户端则返回json数据。
    原理可以参照ErrorMvcAutoConfiguration; 错误处理的自动配置;
    如何定制错误响应:
        如何定制错误的页面：
        1.有模板引擎的情况下,templates/error/状态码.html, 将错误页面命名为错误状态码.html
        2.4xx或5xx.html 作为错误页面的文件名来匹配这种类型的所有错误,精确优先
        页面获取的信息：timestamp:时间cuo,status:状态码,exception:异常对象,message异常信息,errors:JSR303数据校验都在这里


配置嵌入式Servlet容器
    SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置;EmbeddedServletContainerCustomizer
    注册Servlet,Filter,Listener三大组件




使用外置的Servlet容器
    1.嵌入式Servlet容器：应用打成可执行的jar
​    优点：简单、便携；
​    缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；

    2.外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；
    步骤
    1）、必须创建一个war项目；（利用idea创建好目录结构）
    2）、将嵌入式的Tomcat指定为provided；
    <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-tomcat</artifactId>
       <scope>provided</scope>
    </dependency>
    3）、必须编写一个SpringBootServletInitializer的子类，并调用configure方法
    public class ServletInitializer extends SpringBootServletInitializer {
       @Override
       protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
           //传入SpringBoot应用的主程序
          return application.sources(SpringBoot04WebJspApplication.class);
       }
    }
    4）、启动服务器就可以使用；



SpringBoot与Docker

















